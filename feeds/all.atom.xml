<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ahmad Ma'ruf</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2021-01-21T18:05:00+08:00</updated><entry><title>Prinsip Dasar Pemrograman</title><link href="/posts/blog/2021/Jan/prinsip-dasar-premrograman/" rel="alternate"></link><published>2021-01-21T18:05:00+08:00</published><updated>2021-01-21T18:05:00+08:00</updated><author><name>Ahmad Ma'ruf</name></author><id>tag:None,2021-01-21:/posts/blog/2021/Jan/prinsip-dasar-premrograman/</id><summary type="html">&lt;p&gt;Apa itu pemrograman? Apa saja prinsip dasarnya?.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Apa yang membuat kalian tertarik dengan dunia IT?, Ingin menjadi hacker?, bekerja di startup ternama?, atau terinspirasi dengan Elon Musk?. Tentu setiap orang memiliki alasan dan motivasi masing-masing ketika terjun ke dunia IT. &lt;/p&gt;
&lt;p&gt;Didalam dunia IT yang sangat luas, terdapat satu hal yang harus dikuasai, yaitu kemampuan pemrograman. Bagi kalian yang baru memasuki dunia IT, mungkin masih bingung dengan konsep "pemrograman", dll. Pada artikel ini, kita akan membahas apa itu pemrograman, dan konsep dasar dari pemrograman. &lt;em&gt;check this out!&lt;/em&gt;   &lt;/p&gt;
&lt;h1&gt;Apa itu Pemrograman&lt;/h1&gt;
&lt;p&gt;Pengertian paling sederhana dari pemrograman adalah sekumpulan instruksi untuk menyelesaikan masalah yang spesifik. Dalam pengertian dini, banyak kegiatan sehari-hari dapat dikategorikan sebagai pemrograman; kegiatan tersebut memiliki instruksi spesifik yang dilakukan dalam urutan tertentu.&lt;/p&gt;
&lt;p&gt;Contoh sederhananya adalah sebuah resep makanan. Kita bisa melihat resep sebagai sebuah program yang berfungsi untuk mereproduksi produk (makanan), tanpa harus dibantu oleh pembuat asli makanan tersebut. Ketika menjalankan instruksi pada resep dengan benar dan berurutan, maka hasil makanannya akan serupa dengan buatan si pembuat asli makanan tersebut (pembuat resep).&lt;/p&gt;
&lt;p&gt;Dalam konteks komputasi, pemrograman merupakan suatu proses membuat sekumpulan (set) instruksi yang dimengerti oleh komputer dalam rangka untuk menyelesaikan suatu masalah spesifik. &lt;/p&gt;
&lt;p&gt;Karena komputer hanya mengenal angka 0 dan 1, maka akan sangat sulit bagi kita untuk menulis program komputer secara langsung menggunakan bilangan biner. Oleh karena itu, kita memerlukan alat bantu, yang bertugas menjadi jembatan komunikasi antara kita dengan komputer. Alat bantu tersebut dikenal sebagai “bahasa pemrograman”. Sebuah bahasa yang dimengerti oleh komputer dan programmer itu sendiri. melalui bahasa pemrograman, kita memberi instruksi kepada komputer untuk melakukan tugas tertentu.&lt;/p&gt;
&lt;p&gt;Pada umumnya sebuah program untuk komputer dibuat untuk menyelesaikan masalah yang memiliki ciri-ciri sebagai berikut:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Berulang. Sebuah masalah yang dilakukan berulang-ulang, yang melampaui kesabaran manusia jika dilakukan secara manual.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kontrol mesin pada kondisi yang tidak mungkin dilakukan oleh manusia karena keterbatasan fisik atau kondisi berbahaya.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sebuah masalah yang memerlukan akurasi dan konsistensi yang tinggi.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sebuah masalah yang memerlukan kecepatan pemrosesan yang tinggi.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;Konsep Dasar Pemrograman&lt;/h1&gt;
&lt;p&gt;Meskipun setiap bahasa pemrograman memiliki aturan dan keunikan masing-masing, terdapat beberapa konsep yang umum ditemukan di semua bahasa pemrograman tersebut, diantaranya:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Urutan Instruksi/Perintah&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Membuat instruksi yang benar tentu sangat penting, akan tetapi instruksi tersebut juga harus disusun dengan urutan yang benar. Misal instruksi untuk membuat kopi,  apabila instruksi mengaduk kopi dilakukan terlebih dahulu sebelum kopi dan air dimasukkan kedalam gelas, tentu membuat instruksi tersebut ambigu dan hasil yang diinginkan tidak tercapai.&lt;/p&gt;
&lt;p&gt;Pun begitu, dalam beberapa kasus, urutan instruksi bukan merupakan kewajiban. Sering kali dalam kasus tersebut, dibuat sebuah konvensi/urutan yang disepakati bersama untuk menghindari kerancuan. contohnya dalam penulisan alamat rumah yang biasanya memiliki urutan sebagai berikut:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;Nama Lengkap&lt;/span&gt;
&lt;span class="err"&gt;Jalan, RT/RW, No. rumah&lt;/span&gt;
&lt;span class="err"&gt;Kelurahan,Kecamatan,&lt;/span&gt;
&lt;span class="err"&gt;Kabupaten/kota, KODE POS&lt;/span&gt;
&lt;span class="err"&gt;Provinsi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Urutan tersebut disepakati untuk mempermudah &amp;amp; mempercepat proses mengidentifikasi alamat seseorang.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Struktur Percabangan/Kondisi Bersyarat&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Biasanya berupa pertanyaan kondisi. sekumpulan/blok instruksi akan dilakukan ketika kondisi tersebut terpenuhi. Dan apabila tidak terpenuhi, maka blok instruksi tersebut diabaikan dan lakukan instruksi lainnya.&lt;/p&gt;
&lt;p&gt;Pada umumnya, struktur percabangan tersebut berupa &lt;strong&gt;if&lt;/strong&gt;... &lt;strong&gt;then&lt;/strong&gt;... &lt;strong&gt;else&lt;/strong&gt;...&lt;/p&gt;
&lt;p&gt;yang berarti&lt;strong&gt;jika&lt;/strong&gt; ...(kondisi terpenuhi)... &lt;strong&gt;maka&lt;/strong&gt;...(lakukan ini)... &lt;strong&gt;atau jika tidak terpenuhi&lt;/strong&gt;...(lakukan itu)... &lt;/p&gt;
&lt;p&gt;contoh:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;nilai&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Kamu lulus&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Siap-siap remidial ya!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Penjelasan kode diatas:&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;if nilai &amp;gt;=75&lt;/code&gt; ini merupakan kondisi/syaratnya. jika (&lt;code&gt;if&lt;/code&gt;) kondisi ini terpenuhi, maka komputer akan menjalankan perintah &lt;code&gt;print("Kamu lulus")&lt;/code&gt;serta mengabaikan perintah dibawahnya. &lt;/p&gt;
&lt;p&gt;Sedangkan jika kondisi tidak terpenuhi (&lt;code&gt;else&lt;/code&gt;), maka perintah diatas akan diabaikan, dan akan langsung menjalankan perintah &lt;code&gt;print("Siap-siap remidial ya!")&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Struktur Perulangan/Loop&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Struktur ini dipakai agar komputer mengulang sekumpulan/blok instruksi yang sama. perulangan bisa dibuat dengan menentukan banyaknya perulangan yang diinginkan, atau selama sebuah kondisi tidak berubah/ masih bernilai benar. contoh:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;Lakukan instruksi A sebanyak 10 kali&lt;/span&gt;
&lt;span class="err"&gt;---&lt;/span&gt;
&lt;span class="err"&gt;Lakukan instruksi B sebanyak jarak antara angka 1 sampai 5&lt;/span&gt;
&lt;span class="err"&gt;---&lt;/span&gt;
&lt;span class="err"&gt;Lakukan instruksi C secara terus menerus ketika waktu == jam makan siang&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Konsep dasar pemrograman sangat penting untuk dipahami, karena mempermudah kita dalam mempelajari pemrograman. Konsep ini juga melatih logika dan kemampuan &lt;em&gt;computational thinking&lt;/em&gt; kita.&lt;/p&gt;
&lt;p&gt;Selain itu, konsep dasar pemrograman ini muncul pada hampir semua bahasa pemrograman. Sehingga kita dapat memahami logika dari sebuah kode, meskipun kita belum menguasai bahasa pemograman yang digunakan pada kode tersebut.  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Referensi:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://livecode.byu.edu/programmingconcepts/ControlStruct.php"&gt;Programming Concepts&lt;/a&gt;&lt;/p&gt;</content><category term="blog"></category><category term="programming"></category><category term="blogs"></category><category term="basic"></category></entry><entry><title>Prinsip Clean Code</title><link href="/posts/blog/2020/Des/prinsip-clean-code/" rel="alternate"></link><published>2020-12-24T18:25:00+08:00</published><updated>2020-12-24T18:25:00+08:00</updated><author><name>Ahmad Ma'ruf</name></author><id>tag:None,2020-12-24:/posts/blog/2020/Des/prinsip-clean-code/</id><summary type="html">&lt;p&gt;Prinsip clean code dalam pemrograman.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Ketika kita mulai belajar pemograman, apa yang kita pelajari pertama kali?, pasti &lt;code&gt;syntax&lt;/code&gt; bahasa pemrograman. Ketika kita menemukan &lt;code&gt;error/bugs&lt;/code&gt;, apa yang pertama kali kita lihat?, pasti kode kita. Ketika kita diskusi di forum programmer, apa yang paling sering menjadi topik pembahasan?, Jawabannya &lt;code&gt;best practice programming&lt;/code&gt;, &lt;code&gt;library/framework&lt;/code&gt; yang sendang tenar, update IDE terbaru, dsb.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Semua hal diatas tak lepas dari yang namanya “kode”. Bahkan sudah tertanam di alam bawah sadar kita, definisi programmer adalah orang yang menulis kode alias &lt;em&gt;“tukang ngoding”&lt;/em&gt;. Pernyataan Itu tidaklah salah, tetapi juga tidak sepenuhnya benar. Banyak kemampuan lain  yang harus diasah agar menjadi programmer yang handal. Salah satunya adalah kemampuan menulis dan bercerita.  &lt;/p&gt;
&lt;h1&gt;Loh, buat apa programmer bercerita?.&lt;/h1&gt;
&lt;p&gt;Saya ambil quotes yang cukup terkenal di dunia pemrograman, &lt;strong&gt;&lt;em&gt;“Code is read more often that it is written”&lt;/em&gt;&lt;/strong&gt;. Yang maksudnya adalah, sebagai programmer kita akan lebih sering membaca (dan memahami) kode daripada menulisnya. Ketika kita membangun sebuah software, kita akan berulang kali membaca kode kita. Entah itu karena terdapat error, mengecek konsistensi kode kita atau bahkan ketika kita lupa tugas apa yang dikerjakan kode tersebut. oleh karena itu, lahirlah prinsip &lt;code&gt;“clean code”&lt;/code&gt;, yang pada intinya kita harus mengikuti prinsip ini agar kode kita mudah dipahami oleh orang lain. Ketika kode kita mudah dipahami, disitulah kode kita mampu "bercerita".&lt;/p&gt;
&lt;p&gt;Berikut beberapa aspek penting dalam penerapan prinsip clean code:&lt;/p&gt;
&lt;h2&gt;Sistem Penamaan yang Baik.&lt;/h2&gt;
&lt;p&gt;Dalam menentukan nama variabel dan function, kita sebaiknya mengikuti konvensi/acuan umum yang berlaku pada bahasa/framework yang digunakan. Selain itu, pastikan namanya tidak ambigu dan mewakili tugas apa yang dilakukannya.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DO's&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;harga_tanah&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;luas_tanah&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;luas_tanah&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;500000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;DON'Ts&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hrgTnh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;500000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Menuliskan Komentar Secara efisien&lt;/h2&gt;
&lt;p&gt;Mungkin kita pernah berpikir, semakin banyak komentar yang kita tulis pada kode kita, maka semakin jelas &amp;amp; mudah dipahami kode tersebut. &lt;em&gt;well&lt;/em&gt;, sebenarnya tidak juga. Ketika kita menulis kode kita dengan baik (sistem penamaan yang baik, indentasi yang rapi, dsb), kita tidak perlu menuliskan banyak komentar. Jadi, dalam menuliskan komentar, pastikan komentar itu dibuat karena bagian itu memerlukan penjelasan ekstra. Bukan karena penulisan kode yang buruk.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DO's&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Menghitung harga tanah dan mengembalikan (return) hasilnya&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;harga_tanah&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;luas_tanah&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;luas_tanah&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;500000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;DON'Ts&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# menghitung hrg tanah&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hrgTnh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;500000&lt;/span&gt; &lt;span class="c1"&gt;# &amp;#39;l&amp;#39; adalah variabel luas tanah&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;kita tak perlu lagi memberi komentar untuk variabel l ketika kita sudah menggunakan sistem penamaan yang baik.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;strong&gt;&lt;em&gt;Best Practice&lt;/em&gt; dalam menulis komentar&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tuliskan outline/gambaran umum kegunaan dari kode tersebut. sehingga kita mendapat gambaran fungsi kode tersebut secara cepat tanpa harus memahaminya secara mendetail (code skimming)    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tuliskan komentar pendek pada function/method yang kompleks, yang menggambarkan kegunaannya.&lt;br&gt;
&lt;strong&gt;P.S.&lt;/strong&gt; Untuk function yang bersifat publik, wajib menuliskan docstring yang sesuai pada &lt;strong&gt;semua&lt;/strong&gt; function       &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jangan menggunakan kata-kata kasar. Sering kali kode kita dilihat/review orang lain. Tentu sebagai orang waras, kita tidak ingin mempermalukan diri kita dengan komentar bernada kasar.    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hindari komentar "WET", alias Wrote everything twice. maksudnya, apabila kode kita sudah clear &amp;amp; mudah dipahami, kita tidak perlu menuliskan komentar lagi.    &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;contoh:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;hasil&lt;/span&gt; &lt;span class="c1"&gt;# return hasil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;komentar pada kode diatas tidak berguna dan hanya buang-buang waktu karena sama sekali tidak membantu (hanya ditulis ulang kodenya)    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Penulisan Function yang efektif&lt;/h2&gt;
&lt;p&gt;Dalam bebeberapa kasus mungkin kita ingin memasukkan beberapa perhitungan/tugas dalam sebuah function sekaligus. Hal ini sebaiknya dihindari, karena dapat menimbulkan kerancuan dan berpotensi menghasilkan bugs. Pastikan satu function hanya mengerjakan satu tugas saja. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DO's&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Menghitung harga tanah dan mengembalikan (return) hasilnya&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;harga_tanah&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;luas_tanah&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;luas_tanah&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;500000&lt;/span&gt;

&lt;span class="c1"&gt;# menghitung persentase makelar&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;makelar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;harga_tanah&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mf"&gt;0.05&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;harga_tanah&lt;/span&gt; &lt;span class="c1"&gt;# 0.05 sama dengan 5%&lt;/span&gt;

&lt;span class="n"&gt;harga_tanah_ali&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;harga_tanah&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;uang_makelar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;makelar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;harga_tanah_ali&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;DONT's&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# menghitung harga tanah dan makelar&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;harga_tanah_dan_makelar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;luas_tanah&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;harga_tanah&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;luas_tanah&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;500000&lt;/span&gt;
    &lt;span class="n"&gt;uang_makelar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.05&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;harga_tanah&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;harga_tanah&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;uang_makelar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Kode diatas tidak efisien,karena apabila kita kita hanya memerlukan salah satu output saja, kode tersebut tetap melakukan dua kali perhitungan. Selain itu, return yang dihasilkan berupa list, sehingga kita perlu menentukan secara spesifik return mana yang ingin kita gunakan. Hal ini tentu membingungkan dan berpotensi menghasilkan bugs pada kode kita.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Exception Handling&lt;/h2&gt;
&lt;p&gt;Ketika kode kita semakin banyak dan kompleks, potensi menghasilkan bugs/error juga semakin besar. Sebagai programmer kita tentu tidak ingin menghabiskan waktu mencari bugs yang &lt;em&gt;“tidak terlihat”&lt;/em&gt;. Kita tentu ingin ada warning yang jelas mengenai bugs/error tersebut. disinilah exception handling berperan. Dengan exception handling, kita bisa memprediksi error yang berpotensi muncul, dan cara mengatasinya, sehingga software/kode kita tetap bisa berjalan.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DO's&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;harga_tanah&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;luas_tanah&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;luas_tanah&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;500000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Inputan Harus Berupa Angka!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;DONT's&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;harga_tanah&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;luas_tanah&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;luas_tanah&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;500000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;aku ngga tau harus ngapain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Don't Repeat Yourself (DRY)&lt;/h2&gt;
&lt;p&gt;Ketika kita berulang kali menulis kode dengan logika yang sama, ada baiknya kita mempertimbangkan untuk membuat function untuk melakukan tugas tersebut. hal ini supaya tidak terdapat duplikasi kode serta membuat kode kita lebih modular dan terstruktur.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Daripada Seperti ini&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;harga_tanah_ali&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;500000&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;harga_tanah_ali&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;harga_tanah_budi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;500000&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;harga_tanah_budi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;harga_tanah_cici&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3500&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;500000&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;harga_tanah_cici&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;lebih Baik Seperti Ini&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;harga_tanah&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;luas_tanah&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;luas_tanah&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;500000&lt;/span&gt;  

&lt;span class="n"&gt;harga_tanah_ali&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;harga_tanah&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;harga_tanah_budi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;harga_tanah&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;harga_tanah_cici&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;harga_tanah&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;harga_tanah_ali&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;harga_tanah_budi&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;harga_tanah_cici&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;dengan menggunakan function seperti diatas, kita tidak perlu menuliskan kode yang sama berulang kali. selain itu, kita juga bisa menggunakannya di tempat lain atau bahkan di project lain (modular). hal ini tentu sangat berguna untuk meningkatkan efisiensi kita sebagai programmer.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Keep It Simple St*pid (KISS)&lt;/h2&gt;
&lt;p&gt;Prinsip ini pada dasarnya memaksa kita untuk menuliskan kode sesederhana mungkin. Prinsip KISS mengharuskan kita untuk memikirkan &lt;code&gt;logic&lt;/code&gt; kode kita sebelum kita tulis. pastikan logic tersebut sederhana dan mudah dipahami. Prinsip ini juga mengharuskan kita memisahkan function-function dengan logic yang berbeda. Hal ini agar kode kita tidak menjadi &lt;em&gt;"spaghetti code"&lt;/em&gt; serta mudah dalam menemukan dan mengatasi bugs yang muncul.  &lt;/p&gt;
&lt;h2&gt;Penutup&lt;/h2&gt;
&lt;p&gt;Sebagai programmer, kita akan sering bekerja sama dengan programmer lain. kita akan sering memodifikasi kode yang dibuat orang lain. Tanpa prinsip clean code, kita tentu akan kesulitan memahami kegunaan kode tersebut. Sehingga proses pembangunan software tersendat. Dengan penerapan clean code, komunikasi dan kolaborasi antar programmer menjadi lebih baik.&lt;/p&gt;
&lt;p&gt;Prinsip clean code juga memastikan software yang kita bangun lebih mudah dipelihara. Selain itu dengan penerapan clean code, kita akan lebih mudah dalam menambah fitur dan lebih mudah dalam mengatasi bugs. yang pada akhirnya efisiensi dan produktivitas kita sebagai programmer meningkat.&lt;/p&gt;</content><category term="blog"></category><category term="clean-code"></category><category term="programming"></category><category term="tips"></category><category term="blogs"></category></entry><entry><title>Zen of Python</title><link href="/posts/blog/2020/Des/zen-of-python/" rel="alternate"></link><published>2020-12-22T22:02:00+08:00</published><updated>2020-12-22T22:02:00+08:00</updated><author><name>Ahmad Ma'ruf</name></author><id>tag:None,2020-12-22:/posts/blog/2020/Des/zen-of-python/</id><summary type="html">&lt;p&gt;The Zen of Python, by Tim Peters&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Zen of Python&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;this&lt;/span&gt;  
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Zen&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;Tim&lt;/span&gt; &lt;span class="n"&gt;Peters&lt;/span&gt;

&lt;span class="n"&gt;Beautiful&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;ugly&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  
&lt;span class="n"&gt;Explicit&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;implicit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  
&lt;span class="n"&gt;Simple&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="nb"&gt;complex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  
&lt;span class="n"&gt;Complex&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;complicated&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  
&lt;span class="n"&gt;Flat&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;nested&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  
&lt;span class="n"&gt;Sparse&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;dense&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  
&lt;span class="n"&gt;Readability&lt;/span&gt; &lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  
&lt;span class="n"&gt;Special&lt;/span&gt; &lt;span class="n"&gt;cases&lt;/span&gt; &lt;span class="n"&gt;aren&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t special enough to break the rules.  &lt;/span&gt;
&lt;span class="n"&gt;Although&lt;/span&gt; &lt;span class="n"&gt;practicality&lt;/span&gt; &lt;span class="n"&gt;beats&lt;/span&gt; &lt;span class="n"&gt;purity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  
&lt;span class="n"&gt;Errors&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt; &lt;span class="n"&gt;silently&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  
&lt;span class="n"&gt;Unless&lt;/span&gt; &lt;span class="n"&gt;explicitly&lt;/span&gt; &lt;span class="n"&gt;silenced&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;face&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;ambiguity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;refuse&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;temptation&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  
&lt;span class="n"&gt;There&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;preferably&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;obvious&lt;/span&gt; &lt;span class="n"&gt;way&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  
&lt;span class="n"&gt;Although&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;way&lt;/span&gt; &lt;span class="n"&gt;may&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;obvious&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;re Dutch.  &lt;/span&gt;
&lt;span class="n"&gt;Now&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  
&lt;span class="n"&gt;Although&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;often&lt;/span&gt; &lt;span class="n"&gt;better&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  
&lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;hard&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;explain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s a bad idea.  &lt;/span&gt;
&lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;easy&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;explain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;may&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="n"&gt;idea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  
&lt;span class="n"&gt;Namespaces&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;honking&lt;/span&gt; &lt;span class="n"&gt;great&lt;/span&gt; &lt;span class="n"&gt;idea&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s do more of those!  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="blog"></category><category term="python"></category></entry></feed>